# IMPORTANT - READ THIS FIRST: MCP Function Usage Guide
You have full access to MCP functionality including GitHub operations and file system access. Review these instructions before proceeding with any development tasks.

## Essential MCP Patterns
1. File Reading and Validation:
```typescript
// Always get current content before updates
const fileContent = await get_file_contents({
  owner: "nuwud",
  repo: "whiskeywiz",
  path: "path/to/file"
});
```

2. Making Changes - ALWAYS create a feature branch first:
```typescript
// 1. Create branch
await create_branch({
  owner: "nuwud",
  repo: "whiskeywiz",
  branch: "feature/meaningful-name"
});

// 2. Update file
await create_or_update_file({
  owner: "nuwud",
  repo: "whiskeywiz",
  path: "path/to/file",
  branch: "feature/branch-name",
  message: "type: descriptive message",
  content: "file content"
});
```

## Project Context: Whiskey Wiz Game
Angular/Firebase web application for quarterly whiskey tasting game. Features:
- Web components for Shopify embedding
- Firebase backend with authentication
- Quarter-based game structure
- Admin/User role management

## Key Files
1. src/app/shared/models/quarter.model.ts - Data interfaces
2. src/app/services/firebase.service.ts - Firebase operations
3. src/app/services/auth.service.ts - Authentication
4. src/app/admin/admin.component.ts - Admin interface
5. src/app/shared/game/game.component.ts - Game interface
6. src/app/app.module.ts - Module config
7. src/app/app-routing.module.ts - Routing

## Recent Updates:
1. Quarter chronological sorting
2. Bulk quarter management
3. Collapsible quarter list
4. Web component fixes
5. Navigation updates

## Current Focus:
1. Web component deployment testing
2. Quarter activation management
3. Shopify integration

## Tech Stack:
- Angular web components
- Firebase/Firestore
- Shopify integration
- Role-based access

[Additional technical details follow...]"